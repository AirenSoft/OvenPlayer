{"version":3,"file":"RTCTransformWorker.worker.worker.js","mappings":"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","sources":["webpack://OvenPlayer/./src/js/api/worker/RTCTransformWorker.worker.js"],"sourcesContent":["/**\n * Created by rock on 2025. 2\n */\n\nconst OVENMEDIAENGINE_SEI_METADATA_UUID = '464d4c475241494e434f4c4f55524201';\n\nfunction removeEmulationPreventionBytes(data) {\n  const rbsp = [];\n  for (let i = 0; i < data.length; i++) {\n\n    if (i > 2 && data[i - 2] === 0x00 && data[i - 1] === 0x00 && data[i] === 0x03) {\n      continue; // skip 0x03\n    }\n    rbsp.push(data[i]);\n  }\n  return new Uint8Array(rbsp);\n}\n\nfunction parseSEIPayload(rbsp) {\n\n  const messages = [];\n\n  let i = 0;\n  const rbspLength = rbsp[rbsp.length - 1] === 0x80 ? rbsp.length - 1 : rbsp.length;\n\n  while (i < rbspLength) {\n\n    let type = 0;\n    while (rbsp[i] === 0xFF) {\n      type += 255;\n      i++;\n    }\n    type += rbsp[i++];\n\n    let size = 0;\n    while (rbsp[i] === 0xFF) {\n      size += 255;\n      i++;\n    }\n    size += rbsp[i++];\n\n    const payload = rbsp.slice(i, i + size);\n    i += size;\n\n    messages.push({ type, size, payload });\n\n    return { type, size, payload };\n  }\n\n  return messages;\n}\n\nfunction toHexString(byteArray, delimiter = '') {\n  return Array.from(byteArray, byte => {\n    return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n  }).join(delimiter);\n}\n\nfunction toHexArray(byteArray) {\n  return Array.from(byteArray, byte => {\n    return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n  });\n}\n\nfunction toUUID(byteArray) {\n  const hexString = toHexString(byteArray);\n  return [\n    hexString.slice(0, 8),\n    hexString.slice(8, 12),\n    hexString.slice(12, 16),\n    hexString.slice(16, 20),\n    hexString.slice(20, 24),\n    hexString.slice(24, 32)\n  ].join('-');\n}\n\nfunction toTimestamp(byteArray) {\n  const hexString = toHexString(byteArray);\n  return parseInt(hexString, 16);\n}\n\nfunction toAsciiString(byteArray) {\n  return String.fromCharCode.apply(null, byteArray);\n}\n\nfunction findNalStartIndex(frameData, offset) {\n  while (offset < frameData.byteLength - 4) {\n    if ((frameData[offset] === 0x00 && frameData[offset + 1] === 0x00)\n      && (frameData[offset + 2] === 0x01 || (frameData[offset + 2] === 0x00 && frameData[offset + 3] === 0x01))) {\n      return offset;\n    } else {\n      offset += 1;\n    }\n  }\n  return -1;\n}\n\nfunction getNalus(frameData) {\n\n  let offset = 0;\n  const headerSize = 1;\n  const nalus = [];\n\n  while (offset < frameData.byteLength - 4) {\n\n    const startCodeIndex = findNalStartIndex(frameData, offset);\n\n    if (startCodeIndex >= offset) {\n\n      const startCodeLength = frameData[startCodeIndex + 2] === 0x01 ? 3 : 4;\n      const nextStartCodeIndex = findNalStartIndex(frameData, startCodeIndex + startCodeLength + headerSize);\n\n      if (nextStartCodeIndex > startCodeIndex) {\n\n        nalus.push(frameData.subarray(startCodeIndex, nextStartCodeIndex));\n        offset = nextStartCodeIndex;\n      } else {\n\n        nalus.push(frameData.subarray(startCodeIndex));\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n  return nalus;\n}\n\nfunction createReceiverTransform() {\n  return new TransformStream({\n    start() { },\n    flush() { },\n    async transform(encodedFrame, controller) {\n\n      const nalus = getNalus(new Uint8Array(encodedFrame.data));\n\n      nalus.forEach((nalu) => {\n\n        const startCodeLength = nalu[2] === 0x01 ? 3 : 4;\n        const headerCodeLength = 1;\n        const nalHeader = nalu[startCodeLength];\n        const nalType = nalHeader & 0x1F;\n\n        // NAL Type SEI\n        if (nalType === 6) {\n\n          const rbsp = removeEmulationPreventionBytes(nalu.subarray(startCodeLength + headerCodeLength));\n\n          const parsedSei = parseSEIPayload(rbsp);\n\n          const eventData = {\n            nalu: nalu,\n            sei: parsedSei\n          };\n\n          const uuid = toHexString(parsedSei.payload.subarray(0, 16));\n\n          if (uuid === OVENMEDIAENGINE_SEI_METADATA_UUID) {\n\n            postMessage({\n              action: 'sei', data: {\n                ...eventData,\n                registered: true,\n                uuid: toUUID(parsedSei.payload.subarray(0, 16)),\n                timecode: toTimestamp(parsedSei.payload.subarray(16, 24)),\n                userdata: parsedSei.payload.subarray(24)\n              }\n            });\n          } else {\n\n            postMessage({\n              action: 'sei', data: {\n                ...eventData,\n                registered: false\n              }\n            });\n          }\n        }\n      });\n\n      controller.enqueue(encodedFrame);\n    }\n  })\n}\n\nfunction setupPipe({ readable, writable }, transform) {\n  readable\n    .pipeThrough(transform)\n    .pipeTo(writable)\n}\n\naddEventListener('rtctransform', (event) => {\n  setupPipe(event.transformer, createReceiverTransform());\n});\n\naddEventListener('message', (event) => {\n  const { action } = event.data;\n\n  switch (action) {\n    case 'rtctransform':\n      setupPipe(event.data, createReceiverTransform())\n      break;\n    default:\n      break;\n  }\n});\n"],"names":["toHexString","byteArray","delimiter","Array","from","byte","toString","slice","join","toUUID","hexString","toTimestamp","parseInt","findNalStartIndex","frameData","offset","byteLength","createReceiverTransform","TransformStream","start","flush","transform","encodedFrame","controller","nalus","startCodeIndex","nextStartCodeIndex","push","subarray","getNalus","Uint8Array","data","forEach","nalu","startCodeLength","parsedSei","rbsp","messages","i","rbspLength","length","type","size","payload","parseSEIPayload","removeEmulationPreventionBytes","eventData","sei","postMessage","action","registered","uuid","timecode","userdata","enqueue","setupPipe","readable","writable","pipeThrough","pipeTo","addEventListener","event","transformer"],"sourceRoot":""}